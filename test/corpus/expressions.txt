=========
Calls
=========

a()
b(1)
c(d)
d(e, f)

---------

(source_file
  (call_expression
    function: (identifier)
    arguments: (argument_list))
  (call_expression
    function: (identifier)
    arguments: (argument_list
      (integer)))
  (call_expression
    function: (identifier)
    arguments: (argument_list
      (identifier)))
  (call_expression
    function: (identifier)
    arguments: (argument_list
      (identifier)
      (identifier))))

=========
Binary
=========

1.0+1.0
1.0-1.0
1.0*1.0
1.0/1.0

---------

(source_file
  (binary_expression
    left: (float)
    (operator)
    right: (float))
  (binary_expression
    left: (float)
    (operator)
    right: (float))
  (binary_expression
    left: (float)
    (operator)
    right: (float))
  (binary_expression
    left: (float)
    (operator)
    right: (float)))

=========
Comparison
=========

1 < 2 <= 3 == 3 >= 2 > 1

---------

(source_file
  (binary_expression
    left: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (binary_expression
            left: (integer)
            (operator)
            right: (integer))
          (operator)
          right: (integer))
        (operator)
        right: (integer))
      (operator)
      right: (integer))
    (operator)
    right: (integer)))

=========
Assignments
=========

a = b = c;
b += c;
[~,b] = c;

---------

(source_file
  (assignment_expression
    left: (identifier)
    (operator)
    right: (assignment_expression
      left: (identifier)
      (operator)
      right: (identifier)))      
  (assignment_expression
    left: (identifier)
    (operator)
    right: (identifier))
  (assignment_expression
    left: (matrix_pattern
      (tilde)
      (identifier))
    (operator)
    right: (identifier)))

=========
Unary
=========

a++
a'
--b
!b

---------

(source_file
  (unary_expression
    (identifier)
    (operator))
  (unary_expression
    (identifier)
    (operator))
  (unary_expression
    (operator)
    (unary_expression
      (operator)
      (identifier)))
  (unary_expression
    (operator)
    (identifier)))

=========
Binary/unary precedence
=========


a' .^ b
-a ^ b

---------

(source_file
  (binary_expression
    left: (unary_expression
      (identifier)
      (operator))
    (operator)
    right: (identifier))
  (unary_expression
    (operator)
    (binary_expression
      left: (identifier)
      (operator)
      right: (identifier))))

=========
Member expression
=========

a.b.c = 1

---------

(source_file
  (assignment_expression
    left: (member_expression
      element: (member_expression
        element: (identifier)
        field: (identifier))
      field: (identifier))
    (operator)
    right: (integer)))

=========
Matrix expression
=========

[1 3 3; 4 5 6]
['123' "456"]

---------

(source_file
  (matrix
    (integer)
    (integer)
    (integer)
    (integer)
    (integer)
    (integer))
  (matrix
    (char)
    (string)))

=========
Cell expression
=========

{ 'a'; 1,2,3 }

---------

(source_file
  (cell
    (char)
    (integer)
    (integer)
    (integer)))

=========
Function handle
=========

h = @fun

---------

(source_file
  (assignment_expression
    left: (identifier)
    (operator)
    right: (function_handle
      (identifier))))

=========
Anonymous function
=========

h = @(x) sin(1./x);

---------

(source_file
  (assignment_expression
    left: (identifier)
    (operator)
    right: (anonymous_function
      (argument_list
        (identifier))
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (binary_expression
            left: (float)
            (operator)
            right: (identifier)))))))

=========
Colon expression
=========

A(1:2:end)

---------

(source_file
  (call_expression
    function: (identifier)
    arguments: (argument_list
      (colon_expression
        (integer)
        (integer)
        (identifier)))))

=========
Index expression
=========

A{3,4,2} = [];

---------

(source_file
  (assignment_expression
    left: (index_expression
      (identifier)
      (integer)
      (integer)
      (integer))
    (operator)
    right: (matrix)))