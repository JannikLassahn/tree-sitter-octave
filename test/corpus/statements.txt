=========
Function declarations
=========

function foo
end

function foo(a, b)
end

function res = foo()
    res = 1;
endfunction

---------

(source_file
  (function_declaration
    name: (identifier))
  (function_declaration
    name: (identifier)
    parameters: (parameters
      (identifier)
      (identifier)))
  (function_declaration
    (function_return
      (identifier))
    name: (identifier)
    parameters: (parameters)
    (assignment
      left: (identifier)
      (operator)
      right: (integer))))

=========
If statements
=========

if true
    a
end


if true
    a
else
    b
end

if true
    a
elseif false
    b
else
    c
end

---------

(source_file
  (if_statement
    condition: (true)
    (identifier))
  (if_statement
    condition: (true)
    (identifier)
    alternative: (else_clause
      (identifier)))
  (if_statement
    condition: (true)
    (identifier)
    alternative: (elseif_clause
      condition: (false)
      (identifier))
    alternative: (else_clause
      (identifier))))

=========
Switch statement
=========

switch a
  case 1
  case true
    b
   otherwise
    c
 endswitch

---------

(source_file
  (switch_statement
    value: (identifier)
    body: (switch_body
      (switch_case
        value: (integer))
      (switch_case
        value: (true)
        (identifier))
      (switch_otherwise
        (identifier)))))

=========
For statement
=========

for v = [1 2 3]
   disp(v)
end

---------

(source_file
  (for_statement
    value: (identifier)
    (matrix
      (integer)
      (integer)
      (integer))
    (call_expression
      function: (identifier)
      arguments: (argument_list
        (identifier)))))

=========
For statement with structure
=========

for [key, value] = x
   key
   value
end

---------

(source_file
  (for_statement
    value: (matrix_pattern
      (identifier)
      (identifier))
    (identifier)
    (identifier)
    (identifier)))

=========
While statement
=========

while x > 1
  y
  continue;
  break;
end

---------

(source_file
  (while_statement
    condition: (binary_expression
          left: (identifier)
          (operator)
          right: (integer))
    (identifier)
    (continue_statement)
    (break_statement)))


=========
Do until statement
=========

do
  i++
until i < 1

---------

(source_file
  (do_statement
    (unary_expression
      (identifier)
      (operator))
    condition: (binary_expression
      left: (identifier)
      (operator)
      right: (integer))))
      
=========
Try catch statement
=========

try
    a
catch
    log
end

try
    a
catch err
    log(err)
end_try_catch

---------

(source_file
  (try_statement
    (identifier)
    (catch_clause
      (identifier)))
  (try_statement
    (identifier)
    (catch_clause
      (identifier)
      (call_expression
        function: (identifier)
        arguments: (argument_list
          (identifier))))))